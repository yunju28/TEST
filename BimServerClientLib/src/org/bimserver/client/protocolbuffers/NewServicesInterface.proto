package org.bimserver.pb;

/******************************************************************************
 * Copyright (C) 2009-2019  BIMserver.org
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see {@literal<http://www.gnu.org/licenses/>}.
 *****************************************************************************/
import "ServiceInterface.proto";
option java_generic_services = true;

option java_outer_classname = "NewServicesInterfaceImpl";

option optimize_for = SPEED;

service NewServicesInterface {
	rpc listAllServiceDescriptors (ListAllServiceDescriptorsRequest) returns (ListAllServiceDescriptorsResponse);

	rpc listAvailableOutputFormats (ListAvailableOutputFormatsRequest) returns (ListAvailableOutputFormatsResponse);

}

message ListAllServiceDescriptorsRequest {
}

message SNewServiceDescriptor {
	optional string authorizationUrl = 1;
	optional string description = 2;
	repeated string inputs = 3;
	optional string name = 4;
	optional int64 oid = 5;
	repeated string outputs = 6;
	optional string provider = 7;
	optional string registerUrl = 8;
	optional string resourceUrl = 9;
	optional int32 rid = 10;
	optional string tokenUrl = 11;
	optional UUID uuid = 12;
}

message ListAllServiceDescriptorsResponse {
	optional string errorMessage = 1;
	repeated SNewServiceDescriptor value = 2;
}

message ListAvailableOutputFormatsRequest {
	optional int64 poid = 1;
}

message SFormatSerializerMap {
	optional string format = 1;
	optional int64 oid = 2;
	optional int32 rid = 3;
	repeated SSerializerPluginConfiguration serializers = 4;
	optional UUID uuid = 5;
}

message ListAvailableOutputFormatsResponse {
	optional string errorMessage = 1;
	repeated SFormatSerializerMap value = 2;
}

